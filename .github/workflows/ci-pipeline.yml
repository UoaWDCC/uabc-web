name: CI Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CI: 'true'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check_changes:
    name: Check Changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      exists: ${{ steps.filter.outputs.exists }}
    steps:
      - uses: actions/checkout@v4

      - name: Filter changes
        uses: yumemi-inc/path-filter@v2
        id: filter
        with:
          patterns: |
              **
              !**.md
              !.gitignore
              !.gitattributes
              !.vscode/**
              !.env.example

  # setup:
  #   name: Setup
  #   needs: check_changes
  #   if: ${{ needs.check_changes.outputs.exists == 'true' }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 2

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version-file: '.nvmrc'

  #     - name: Setup bun
  #       uses: oven-sh/setup-bun@v2
  #       with:
  #         bun-version: latest

  #     - name: Restore node_modules cache
  #       id: cache
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           node_modules
  #           */node_modules
  #           packages/*/node_modules
  #           apps/*/node_modules
  #         key: ${{ runner.os }}-node_modules-${{ hashFiles('**/bun.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-node_modules-

  #     - name: Install dependencies
  #       if: steps.cache.outputs.cache-hit != 'true'
  #       run: bun install --frozen-lockfile
      
  #     - name: Upload cache
  #       if: steps.cache.outputs.cache-hit != 'true'
  #       uses: actions/cache/save@v4
  #       with:
  #         path: |
  #           node_modules
  #           */node_modules
  #           packages/*/node_modules
  #           apps/*/node_modules
  #         key: ${{ runner.os }}-node_modules-${{ hashFiles('**/bun.lock') }}

  biome:
    needs: [check_changes]
    if: ${{ needs.check_changes.outputs.exists == 'true' }}
    name: Biome
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # - name: Setup Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version-file: '.nvmrc'

      - name: Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      # - name: Restore node_modules cache
      #   uses: actions/cache/restore@v4
      #   id: cache
      #   with:
      #     path: |
      #       node_modules
      #       */node_modules
      #       packages/*/node_modules
      #       apps/*/node_modules
      #     key: ${{ runner.os }}-node_modules-${{ hashFiles('**/bun.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node_modules-

      - name: Install dependencies if cache is not hit
        # if: steps.cache.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

      - name: Check formatting
        run: bun biome check .

  build:
    env:
      PAYLOAD_SECRET: ${{secrets.PAYLOAD_SECRET}}
      DATABASE_URI: ${{secrets.DATABASE_URI}}
    needs: [check_changes]
    if: ${{ needs.check_changes.outputs.exists == 'true' }}
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # - name: Setup Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version-file: '.nvmrc'

      - name: Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      # - name: Restore node_modules cache
      #   uses: actions/cache/restore@v4
      #   id: cache
      #   with:
      #     path: |
      #       node_modules
      #       */node_modules
      #       packages/*/node_modules
      #       apps/*/node_modules
      #     key: ${{ runner.os }}-node_modules-${{ hashFiles('**/bun.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node_modules-

      - name: Install dependencies if cache is not hit
        # if: steps.cache.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

      - name: Build
        run: bun turbo run build

  typecheck:
    needs: [check_changes]
    if: ${{ needs.check_changes.outputs.exists == 'true' }}
    name: TypeScript
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # - name: Setup Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version-file: '.nvmrc'

      - name: Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      # - name: Restore node_modules cache
      #   uses: actions/cache/restore@v4
      #   id: cache
      #   with:
      #     path: |
      #       node_modules
      #       */node_modules
      #       packages/*/node_modules
      #       apps/*/node_modules
      #     key: ${{ runner.os }}-node_modules-${{ hashFiles('**/bun.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node_modules-

      - name: Install dependencies if cache is not hit
        # if: steps.cache.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

      - name: Type Check
        run: bun turbo run check-types

  test:
    needs: [check_changes]
    if: ${{ needs.check_changes.outputs.exists == 'true' }}
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # - name: Setup Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version-file: '.nvmrc'

      - name: Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      # - name: Restore node_modules cache
      #   uses: actions/cache/restore@v4
      #   id: cache
      #   with:
      #     path: |
      #       node_modules
      #       */node_modules
      #       packages/*/node_modules
      #       apps/*/node_modules
      #     key: ${{ runner.os }}-node_modules-${{ hashFiles('**/bun.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node_modules-

      - name: Install dependencies if cache is not hit
        # if: steps.cache.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

      - name: Test with Coverage
        run: |
          mkdir -p coverage
          bun test:coverage
          bun merge

      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: local-coverage
          path: coverage

  vitest-coverage:
    name: Vitest Coverage
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Run Vitest Coverage Composite Action
        uses: ./.github/composite-actions/vitest-coverage
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  codegen:
    needs: [check_changes]
    if: ${{ needs.check_changes.outputs.exists == 'true' }}
    name: Codegen
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # - name: Setup Node.js
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version-file: '.nvmrc'

      - name: Setup bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      # - name: Restore node_modules cache
      #   uses: actions/cache/restore@v4
      #   id: cache
      #   with:
      #     path: |
      #       node_modules
      #       */node_modules
      #       packages/*/node_modules
      #       apps/*/node_modules
      #     key: ${{ runner.os }}-node_modules-${{ hashFiles('**/bun.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node_modules-

      - name: Install dependencies if cache is not hit
        # if: steps.cache.outputs.cache-hit != 'true'
        run: bun install --frozen-lockfile

      - name: Generate typing
        run: bun turbo run generate:types

      - name: Write git diff
        run: |
          if git diff --quiet; then
            echo "TYPE_GEN_DIFF=0" >> $GITHUB_ENV
          else
            echo "TYPE_GEN_DIFF=1" >> $GITHUB_ENV
          fi

      - name: Check for differences in typing
        if: ${{ env.TYPE_GEN_DIFF != '0'}}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Your code generation for typings are not up to date. Run bun generate:types')

  verify:
    name: Verify
    needs: [check_changes, build, biome, test, codegen, typecheck]
    runs-on: ubuntu-latest
    if: >
      always() && 
      (needs.check_changes.outputs.exists != 'true' || 
       ((!contains(needs.*.result, 'failure')) && 
        (!contains(needs.*.result, 'cancelled'))))
    outputs:
      success: ${{ steps.set-result.outputs.success }}
    steps:
      - name: Set Result
        id: set-result
        run: |
          # Check if any job failed or was cancelled
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" || "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "success=true" >> $GITHUB_OUTPUT
          fi