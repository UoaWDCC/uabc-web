name: CI Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CI: 'true'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check_changes:
    name: Check Changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      exists: ${{ steps.filter.outputs.exists }}
    steps:
      - uses: actions/checkout@v4

      - name: Filter changes
        uses: yumemi-inc/path-filter@v2
        id: filter
        with:
          patterns: |
              **
              !**.md
              !.gitignore
              !.gitattributes
              !.vscode/**
              !.idea/**
              !.zed/**
              !.env.example

  biome:
    name: Biome
    needs: [check_changes]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Biome
        uses: biomejs/setup-biome@v2

      - name: Run Biome
        run: biome ci . --error-on-warnings

  cspell:
    name: Spell Check
    needs: [check_changes]
    runs-on: ubuntu-latest
    if: ${{ needs.check_changes.outputs.exists == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: streetsidesoftware/cspell-action@v7

  setup:
    name: Setup
    needs: [check_changes]
    if: ${{ needs.check_changes.outputs.exists == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check if node_modules cache exists
        id: cache-check
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
            packages/*/node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          lookup-only: true

      - name: Setup Node.js
        if: steps.cache-check.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Setup pnpm
        if: steps.cache-check.outputs.cache-hit != 'true'
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Install dependencies
        if: steps.cache-check.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: Save node_modules cache
        if: steps.cache-check.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            node_modules
            */node_modules
            packages/*/node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}

  build-backend:
    needs: [setup, biome, cspell]
    if: ${{ needs.check_changes.outputs.exists == 'true' }}
    name: Build Backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Build Backend
        uses: ./.github/ci-actions/build-backend/
        with:
          NEXT_PUBLIC_URL: ${{ vars.NEXT_PUBLIC_URL }}
          PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}
          DATABASE_URI: ${{ secrets.DATABASE_URI }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

  build-storybook:
    needs: [setup, biome, cspell]
    if: ${{ needs.check_changes.outputs.exists == 'true' }}
    name: Build Storybook
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build Storybook
        uses: ./.github/ci-actions/build-storybook/

  pre-comment:
    name: Pre Comment
    needs: [setup]
    if: ${{ (github.ref != 'refs/heads/master') && needs.check_changes.outputs.exists == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Comment information
        uses: ./.github/ci-actions/comment/
        with:
          method: pre

  preview-storybook:
    needs: [build-storybook]
    if: ${{ always() && (github.ref != 'refs/heads/master') && needs.check_changes.outputs.exists == 'true' }}
    name: Preview Storybook
    runs-on: ubuntu-latest
    outputs:
      deployment-url: ${{ steps.deploy-storybook.outputs.deployment-url }}
    steps:
      - uses: actions/checkout@v4

      - name: Deploy Storybook
        id: preview-storybook
        if: ${{ needs.build-storybook.result == 'success' }}
        uses: ./.github/cd-actions/deploy-storybook/
        with:
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Comment Result
        uses: ./.github/ci-actions/comment/
        if: always()
        with:
          method: post
          type: storybook
          preview-storybook: ${{ steps.preview-storybook.outputs.deployment-url }}

  preview-frontend:
    needs: [setup, cspell, biome]
    if: ${{ (github.ref != 'refs/heads/master') && needs.check_changes.outputs.exists == 'true' }}
    name: Preview Frontend
    runs-on: ubuntu-latest
    outputs:
      deployment-url: ${{ steps.deploy-frontend.outputs.deployment-url }}
    steps:
      - uses: actions/checkout@v4

      - name: Deploy frontend
        id: preview-frontend
        uses: ./.github/cd-actions/deploy-frontend/
        with:
          CLOUDFLARE_ACCOUNT_ID: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          NEXT_PUBLIC_URL: ${{ vars.NEXT_PUBLIC_URL }}
          NEXT_PUBLIC_API_URL: ${{ vars.NEXT_PUBLIC_API_URL }}
          NODE_ENV: preview
          APP_INDEX_MODE: NOINDEX
          project-name: uabc
          worker-name: uabc-frontend-preview-${{ github.event.number || github.ref_name }}

      - name: Comment Result
        uses: ./.github/ci-actions/comment/
        if: always()
        with:
          method: post
          type: frontend
          preview-frontend: ${{ steps.preview-frontend.outputs.deployment-url }}

  typecheck:
    needs: [setup, biome, cspell]
    if: ${{ needs.check_changes.outputs.exists == 'true' }}
    name: TypeScript
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        id: cache
        with:
          path: |
            node_modules
            */node_modules
            packages/*/node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Install dependencies if cache is not hit
        if: steps.cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: Type Check
        run: pnpm turbo run check-types

  test:
    needs: [setup, biome, cspell]
    if: ${{ needs.check_changes.outputs.exists == 'true' }}
    name: Test (${{ matrix.name }})
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: frontend
            filter: frontend
            coverage-path: apps/frontend/coverage
            artifact-name: coverage-frontend
            next-public-url: ${{ vars.NEXT_PUBLIC_URL }}
          - name: backend
            filter: backend
            coverage-path: apps/backend/coverage
            artifact-name: coverage-backend
          - name: ui
            filter: '@repo/ui'
            coverage-path: packages/ui/coverage
            artifact-name: coverage-ui
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Run Tests
        uses: ./.github/ci-actions/test/
        with:
          filter: ${{ matrix.filter }}
          coverage-path: ${{ matrix.coverage-path }}
          artifact-name: ${{ matrix.artifact-name }}
          NEXT_PUBLIC_URL: ${{ vars.NEXT_PUBLIC_URL }}

  merge-coverage:
    name: Merge Coverage
    needs: [test]
    if: ${{ needs.check_changes.outputs.exists == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Run Merge Coverage
        uses: ./.github/ci-actions/merge-coverage/

  vitest-coverage:
    name: Vitest Coverage
    needs: [merge-coverage]
    if: ${{ needs.check_changes.outputs.exists == 'true' && needs.merge-coverage.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Run Vitest Coverage Composite Action
        uses: ./.github/composite-actions/vitest-coverage
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  codegen:
    needs: [setup]
    if: ${{ needs.check_changes.outputs.exists == 'true' }}
    name: Codegen
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        id: cache
        with:
          path: |
            node_modules
            */node_modules
            packages/*/node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Install dependencies if cache is not hit
        if: steps.cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: Generate typing
        run: pnpm turbo run generate:types

      - name: Write git diff
        run: |
          if git diff --quiet; then
            echo "TYPE_GEN_DIFF=0" >> $GITHUB_ENV
          else
            echo "TYPE_GEN_DIFF=1" >> $GITHUB_ENV
          fi

      - name: Check for differences in typing
        if: ${{ env.TYPE_GEN_DIFF != '0'}}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Your code generation for typings are not up to date. Run pnpm generate:types')

  verify:
    name: Verify
    needs: [build-backend, build-storybook, test, merge-coverage, codegen, typecheck]
    runs-on: ubuntu-latest
    if: >
      always() &&
      (needs.check_changes.outputs.exists != 'true' ||
       ((!contains(needs.*.result, 'failure')) &&
        (!contains(needs.*.result, 'cancelled'))))
    outputs:
      success: ${{ steps.set-result.outputs.success }}
    steps:
      - name: Set Result
        id: set-result
        run: |
          # Check if any job failed or was cancelled
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" || "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "success=true" >> $GITHUB_OUTPUT
          fi
