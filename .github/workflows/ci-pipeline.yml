name: CI Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CI: 'true'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check_changes:
    name: Check Changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      exists: ${{ steps.filter.outputs.exists }}
    steps:
      - uses: actions/checkout@v4

      - name: Filter changes
        uses: yumemi-inc/path-filter@v2
        id: filter
        with:
          patterns: |
              **
              !**.md
              !.gitignore
              !.gitattributes
              !.vscode/**
              !.env.example

  setup:
    name: Setup
    needs: check_changes
    if: ${{ needs.check_changes.outputs.exists == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Restore Turborepo cache
        id: turbo-cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-
          lookup-only: true

      - name: Restore node_modules cache
        id: node-modules-cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
            packages/*/node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
          lookup-only: true

      - name: Setup Node.js
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Setup pnpm
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

  parallel-jobs:
    needs: [check_changes, setup]
    if: ${{ needs.check_changes.outputs.exists == 'true' }}
    name: ${{ matrix.job }}
    strategy:
      matrix:
        job: [Biome, Build, Typecheck, Test, Codegen]
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Restore Turborepo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */node_modules
            packages/*/node_modules
            apps/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Run Biome
        if: matrix.job == 'Biome'
        run: pnpm biome check .

      - name: Restore Next.js cache
        if: matrix.job == 'Build' && steps.node-modules-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: apps/*/.next/cache
          key: ${{ runner.os }}-next-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-next-

      - name: Build
        if: matrix.job == 'Build'
        env:
          PAYLOAD_SECRET: ${{secrets.PAYLOAD_SECRET}}
          DATABASE_URI: ${{secrets.DATABASE_URI}}
        run: pnpm build

      - name: Type Check
        if: matrix.job == 'Typecheck'
        run: pnpm check-types

      - name: Test with Coverage
        if: matrix.job == 'Test'
        run: |
          mkdir -p coverage
          pnpm test:coverage
          pnpm merge

      - name: Upload Coverage Artifact
        if: matrix.job == 'Test'
        uses: actions/upload-artifact@v4
        with:
          name: local-coverage
          path: coverage

      - name: Run Vitest Coverage Composite Action
        if: matrix.job == 'Test'
        uses: ./.github/composite-actions/vitest-coverage
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate typing
        if: matrix.job == 'Codegen'
        run: pnpm generate:types

      - name: Write git diff
        if: matrix.job == 'Codegen'
        run: |
          if git diff --quiet; then
            echo "TYPE_GEN_DIFF=0" >> $GITHUB_ENV
          else
            echo "TYPE_GEN_DIFF=1" >> $GITHUB_ENV
          fi

      - name: Check for differences in typing
        if: matrix.job == 'Codegen' && env.TYPE_GEN_DIFF != '0'
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Your code generation for typings are not up to date. Run pnpm generate:types')

  verify:
    name: Verify
    needs: [check_changes, parallel-jobs]
    runs-on: ubuntu-latest
    if: >
      always() && 
      (needs.check_changes.outputs.exists != 'true' || 
       ((!contains(needs.*.result, 'failure')) && 
        (!contains(needs.*.result, 'cancelled'))))
    outputs:
      success: ${{ steps.set-result.outputs.success }}
    steps:
      - name: Set Result
        id: set-result
        run: |
          # Check if any job failed or was cancelled
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" || "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "success=true" >> $GITHUB_OUTPUT
          fi