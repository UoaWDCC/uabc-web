name: CD Pipeline

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '.gitignore'
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Manual deployment environment'
        type: environment
        required: true

jobs:
  wait-for-ci:
    if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      checks: read
    steps:
      - name: Wait for CI checks
        id: wait-for-ci
        uses: poseidon/wait-for-status-checks@v0.6.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  setup-deployment:
    needs: [wait-for-ci]
    if: |
      success() && 
      (
        (github.event_name == 'push' || github.event_name == 'pull_request') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
      )
    runs-on: ubuntu-latest
    outputs:
      comment-id: ${{ steps.find-comment.outputs.comment-id }}
      timestamp: ${{ steps.timestamp.outputs.time }}
    steps:
      - name: Find Comment
        uses: peter-evans/find-comment@v2
        if: github.event_name == 'pull_request'
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Staging Deployment Status
          direction: last
          
      - name: Get timestamp
        if: github.event_name == 'pull_request'
        id: timestamp
        run: echo "time=$(date -u +'%Y-%m-%d %H:%M UTC')" >> $GITHUB_OUTPUT
          
      - name: Create or Update Deployment Status
        if: github.event_name == 'pull_request'
        id: deployment-comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            ## Staging Deployment Status
            
            ### Deployment Information
            üîÑ New deployment triggered for commit: ${{ github.event.pull_request.head.sha }}
            üïí Started at: ${{ steps.timestamp.outputs.time }}
            
            ### Backend Status
            üöÄ Backend deployment in progress...
            URL: https://wdcc-uabc-backend-staging.fly.dev/
            
            ### Frontend Status
            üöÄ Frontend deployment in progress...
            URL: https://wdcc-uabc-frontend-staging.fly.dev/
            
            Please wait while the deployments complete...

  deploy-backend:
    name: Deploy Backend
    needs: setup-deployment
    if: github.event_name == 'push' || github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_SERVER_API_TOKEN  }}
    environment:
      name: staging
      url: https://wdcc-uabc-backend-staging.fly.dev/
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.deploy-backend.outcome }}
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      
      - name: Set Backend Secrets
        id: backend-secrets
        run: flyctl secrets set --config fly.staging.backend.toml DATABASE_URI=${{ secrets.DATABASE_URI }} JWT_SECRET=${{ secrets.JWT_SECRET }} PAYLOAD_SECRET=${{ secrets.PAYLOAD_SECRET }} GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} NEXT_PUBLIC_URL=${{ secrets.NEXT_PUBLIC_URL }} TURBO_TEAM=${{ vars.TURBO_TEAM }} TURBO_TOKEN=${{ secrets.TURBO_TOKEN }} NEXT_PUBLIC_URL=${{ secrets.NEXT_PUBLIC_URL }} NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
      
      - name: Deploy Backend Secrets
        id: backend-secrets-deploy
        run: flyctl secrets deploy --config fly.staging.backend.toml
      
      - name: Deploy Backend
        id: deploy-backend
        run: flyctl deploy --remote-only --config fly.staging.backend.toml --build-arg DATABASE_URI=${{ secrets.DATABASE_URI }} --build-arg JWT_SECRET=${{ secrets.JWT_SECRET }} --build-arg PAYLOAD_SECRET=${{ secrets.PAYLOAD_SECRET }} --build-arg GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} --build-arg GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} --build-arg NEXT_PUBLIC_URL=${{ secrets.NEXT_PUBLIC_URL }} --build-arg TURBO_TEAM=${{ vars.TURBO_TEAM }} --build-arg TURBO_TOKEN=${{ secrets.TURBO_TOKEN }} --build-arg NEXT_PUBLIC_URL=${{ secrets.NEXT_PUBLIC_URL }} --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Update Backend Status
        if: always() && github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ needs.setup-deployment.outputs.comment-id }}
          edit-mode: replace
          body: |
            ## Staging Deployment Status
            
            ### Backend Status
            ${{ steps.deploy-backend.outcome == 'success' && '‚úÖ Backend deployment successful!' || '‚ùå Backend deployment failed!' }}
            URL: https://wdcc-uabc-backend-staging.fly.dev/
            ${{ steps.deploy-backend.outcome == 'success' && format('Completed at: {0}', needs.setup-deployment.outputs.timestamp) || 'Check workflow logs for details.' }}
            
            ### Frontend Status
            üöÄ Frontend deployment in progress...
            URL: https://wdcc-uabc-frontend-staging.fly.dev/

  deploy-frontend:
    name: Deploy Frontend
    needs: setup-deployment
    if: github.event_name == 'push' || github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_CLIENT_API_TOKEN }}
    environment:
      name: staging
      url: https://wdcc-uabc-frontend-staging.fly.dev/
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.deploy-frontend.outcome }}
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      
      - name: Set Frontend Secrets
        id: frontend-secrets
        run: flyctl secrets set --config fly.staging.frontend.toml NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} NEXT_PUBLIC_URL=${{ secrets.NEXT_PUBLIC_URL }} JWT_SECRET=${{ secrets.JWT_SECRET }} TURBO_TEAM=${{ vars.TURBO_TEAM }} TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}
      
      - name: Deploy Frontend Secrets
        id: frontend-secrets-deploy
        run: flyctl secrets deploy --config fly.staging.frontend.toml
      
      - name: Deploy Frontend
        id: deploy-frontend
        run: flyctl deploy --remote-only --config fly.staging.frontend.toml --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }} --build-arg NEXT_PUBLIC_URL=${{ secrets.NEXT_PUBLIC_URL }} --build-arg JWT_SECRET=${{ secrets.JWT_SECRET }} --build-arg TURBO_TEAM=${{ vars.TURBO_TEAM }} --build-arg TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}

      - name: Update Frontend Status
        if: always() && github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ needs.setup-deployment.outputs.comment-id }}
          edit-mode: replace
          body: |
            ## Staging Deployment Status
            
            ### Backend Status
            üöÄ Backend deployment in progress...
            URL: https://wdcc-uabc-backend-staging.fly.dev/
            
            ### Frontend Status
            ${{ steps.deploy-frontend.outcome == 'success' && '‚úÖ Frontend deployment successful!' || '‚ùå Frontend deployment failed!' }}
            URL: https://wdcc-uabc-frontend-staging.fly.dev/
            ${{ steps.deploy-frontend.outcome == 'success' && format('Completed at: {0}', needs.setup-deployment.outputs.timestamp) || 'Check workflow logs for details.' }}

  update-final-status:
    name: Update Final Status
    needs: [setup-deployment, deploy-backend, deploy-frontend]
    if: always() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Find Comment if Missing
        if: needs.setup-deployment.outputs.comment-id == ''
        uses: peter-evans/find-comment@v2
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Staging Deployment Status
          direction: last

      - name: Update Final Status
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ needs.setup-deployment.outputs.comment-id || steps.find-comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            ## Staging Deployment Status
            
            ### Backend Status
            ${{ needs.deploy-backend.outputs.status == 'success' && '‚úÖ Backend deployment successful!' || '‚ùå Backend deployment failed!' }}
            URL: https://wdcc-uabc-backend-staging.fly.dev/
            ${{ needs.deploy-backend.outputs.status == 'success' && format('Completed at: {0}', needs.setup-deployment.outputs.timestamp) || 'Check workflow logs for details.' }}
            
            ### Frontend Status
            ${{ needs.deploy-frontend.outputs.status == 'success' && '‚úÖ Frontend deployment successful!' || '‚ùå Frontend deployment failed!' }}
            URL: https://wdcc-uabc-frontend-staging.fly.dev/
            ${{ needs.deploy-frontend.outputs.status == 'success' && format('Completed at: {0}', needs.setup-deployment.outputs.timestamp) || 'Check workflow logs for details.' }}
            
            ${{ (needs.deploy-backend.outputs.status == 'success' && needs.deploy-frontend.outputs.status == 'success') && '‚ú® All deployments completed successfully!' || '‚ùå Deployment process encountered errors. Please check the workflow logs for more details.' }}

  deploy-to-production:
    name: Deploy UABC Production App
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_APP_API_TOKEN }}
    environment:
      name: production
      url: https://uabc.wdcc.co.nz/
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: echo "To be implemented"