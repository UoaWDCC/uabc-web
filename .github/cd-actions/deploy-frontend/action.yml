name: Deploy Frontend
description: Deploy frontend to Cloudflare Workers

inputs:
  # Environment variables
  CLOUDFLARE_API_TOKEN:
    description: 'Cloudflare API token'
    required: true
  CLOUDFLARE_ACCOUNT_ID:
    description: 'Cloudflare account ID'
    required: true
  GH_TOKEN:
    description: 'GitHub token'
    required: false
  # Frontend secrets
  NEXT_PUBLIC_URL:
    description: 'Frontend URL'
    required: true
  NEXT_PUBLIC_API_URL:
    description: 'Backend API URL'
    required: true
  NODE_ENV:
    description: 'Node environment'
    required: false
  APP_INDEX_MODE:
    description: 'App index mode'
    required: false
  # Additional variables
  project-name:
    description: 'Project name'
    required: true
  worker-name:
    description: 'Cloudflare Worker name'
    required: true
  is-preview:
    description: 'Whether this is a preview deployment'
    required: false
    default: 'false'

outputs:
  deployment-url:
    description: 'The URL of the deployment'
    value: ${{ steps.deploy.outputs.deployment-url }}

runs:
  using: composite
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest
        run_install: |
          - args: [--global, wrangler@3.90.0]

    - name: Restore node_modules cache
      uses: actions/cache/restore@v4
      id: cache
      with:
        path: |
          node_modules
          */node_modules
          packages/*/node_modules
          apps/*/node_modules
        key: ${{ runner.os }}-node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-node_modules-

    - name: Restore Next.js cache
      uses: actions/cache@v4
      with:
        path: |
          apps/frontend/.next/cache
        key: ${{ runner.os }}-nextjs-frontend-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('apps/frontend/package.json') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-frontend-${{ hashFiles('**/pnpm-lock.yaml') }}-
          ${{ runner.os }}-nextjs-frontend-

    - name: Install dependencies if cache misses
      run: NODE_ENV=${{ inputs.NODE_ENV }} pnpm install --frozen-lockfile --ignore-scripts
      shell: bash

    - name: Create Cloudflare Workers Next build
      run: pnpm turbo run --filter=frontend build
      env:
        NEXT_PUBLIC_URL: ${{ inputs.NEXT_PUBLIC_URL }}
        NEXT_PUBLIC_API_URL: ${{ inputs.NEXT_PUBLIC_API_URL }}
        NODE_ENV: ${{ inputs.NODE_ENV }}
        APP_INDEX_MODE: ${{ inputs.APP_INDEX_MODE }}
      shell: bash

    - name: Deploy frontend to Cloudflare Workers (Preview)
      if: inputs.is-preview == 'true'
      uses: cloudflare/wrangler-action@v3
      id: deploy
      with:
        apiToken: ${{ inputs.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ inputs.CLOUDFLARE_ACCOUNT_ID }}
        gitHubToken: ${{ inputs.GH_TOKEN }}
        command: deploy --preview
        workingDirectory: apps/frontend

    - name: Deploy frontend to Cloudflare Workers (Production)
      if: inputs.is-preview != 'true'
      uses: cloudflare/wrangler-action@v3
      id: deploy
      with:
        apiToken: ${{ inputs.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ inputs.CLOUDFLARE_ACCOUNT_ID }}
        gitHubToken: ${{ inputs.GH_TOKEN }}
        command: deploy --name=${{ inputs.worker-name }}
        workingDirectory: apps/frontend

    - name: Output deployment url
      shell: bash
      run: |
        echo "deployment-url=${{ steps.deploy.outputs.deployment-url }}" >> $GITHUB_OUTPUT
